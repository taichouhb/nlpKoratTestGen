/*
 * This file was automatically generated by EvoSuite
 * Tue May 01 03:21:07 GMT 2018
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoublyLinkedList_ESTest extends DoublyLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      Object object0 = new Object();
      doublyLinkedList0.addFirst(object0);
      int int0 = doublyLinkedList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      doublyLinkedList0.addLast((Object) null);
      doublyLinkedList0.addLast((Object) null);
      doublyLinkedList0.removeLast();
      assertEquals(1, doublyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      Object object0 = new Object();
      doublyLinkedList0.addFirst(object0);
      doublyLinkedList0.addFirst(doublyLinkedList0);
      doublyLinkedList0.removeLast();
      assertEquals(1, doublyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      doublyLinkedList0.addLast((Object) null);
      Integer integer0 = new Integer(0);
      doublyLinkedList0.addLast(integer0);
      doublyLinkedList0.removeFirst();
      assertEquals(1, doublyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoublyLinkedList<Integer> doublyLinkedList0 = new DoublyLinkedList<Integer>();
      // Undeclared exception!
      try { 
        doublyLinkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DoublyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      Object object0 = new Object();
      doublyLinkedList0.addFirst(object0);
      // Undeclared exception!
      try { 
        doublyLinkedList0.removeLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DoublyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      // Undeclared exception!
      try { 
        doublyLinkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DoublyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      Object object0 = new Object();
      doublyLinkedList0.addFirst(object0);
      // Undeclared exception!
      try { 
        doublyLinkedList0.removeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("DoublyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoublyLinkedList<Integer> doublyLinkedList0 = new DoublyLinkedList<Integer>();
      Integer integer0 = new Integer((-16));
      doublyLinkedList0.addLast(integer0);
      doublyLinkedList0.iterateBackward();
      assertEquals(1, doublyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      Object object0 = new Object();
      doublyLinkedList0.addFirst(object0);
      doublyLinkedList0.iterateForward();
      assertEquals(1, doublyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      Object object0 = new Object();
      doublyLinkedList0.addFirst(object0);
      doublyLinkedList0.addFirst(doublyLinkedList0);
      doublyLinkedList0.removeFirst();
      assertEquals(1, doublyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      boolean boolean0 = doublyLinkedList0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      Object object0 = new Object();
      doublyLinkedList0.addFirst(object0);
      boolean boolean0 = doublyLinkedList0.isEmpty();
      assertEquals(1, doublyLinkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoublyLinkedList<Object> doublyLinkedList0 = new DoublyLinkedList<Object>();
      int int0 = doublyLinkedList0.size();
      assertEquals(0, int0);
  }
}
